% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/prog.pop.selection.R
\name{prog.pop.selection}
\alias{prog.pop.selection}
\title{Determine populations with prognostic value}
\usage{
prog.pop.selection(
  fcs.SCE,
  assay.i = "normalized",
  cell.clusters,
  variables,
  cutoff.type = "maxstat",
  time.var,
  event.var,
  condition.col,
  cell.value = "percentage",
  method,
  method.params,
  plot = T,
  return.ML.object = F,
  train.index
)
}
\arguments{
\item{fcs.SCE}{A \code{fcs.SCE} object generated through \code{\link[FlowCT:fcs.SCE]{FlowCT::fcs.SCE()}}.}

\item{assay.i}{Name of matrix stored in the \code{fcs.SCE} object from which calculate correlation. Default = \code{"normalized"}.}

\item{cell.clusters}{Name of column containing clusters identified through \code{\link[FlowCT:clustering.flow]{FlowCT::clustering.flow()}}.}

\item{variables}{Vector with variables for calculating the prognostic relevance. If nothing is detailed (default), all immune populations from \code{cell.clusters} will be considered.}

\item{cutoff.type}{Method for calculating survival cutoff.types. Available methods are "maxstat" (default), "ROC", "quantiles" (i.e., terciles) and "median". If "none" is especified, raw percentages (or counts) were used instead of categorical variables.}

\item{time.var}{Survival time variable.}

\item{event.var}{Variable with event censoring. Important note: positive and negative events should be coded as 1 and 0, respectively.}

\item{condition.col}{Variable with differential condition (only needed if \code{method = "biosign"}).}

\item{cell.value}{String specifying if final resuls should be proportions ("percentage", default) or raw counts ("counts").}

\item{method}{Machine learning approaches available for variable selection. Possible values are: "biosign", "random_forest" and "survboost".}

\item{method.params}{Internal options for "tunning" the selected method, see each package's help for more information and default values.}

\item{plot}{Whether results should be plotted. Default = \code{TRUE}.}

\item{return.ML.object}{Logical indicating if the machine learning object must be returned (for later \code{predict}s). Default = \code{FALSE}.}

\item{train.index}{Vector (based on "filename" variable) with samples selected as training dataset (needed for later \code{predict}s).}
}
\description{
Determine, by using different machine learning approaches, those populations with prognostic value... either with raw percentage (continuous variable) or under cutoff.types (categorical variable).
}
\details{
Up to now, this wrapper function is comprising three different methods. Please, check each package's help for further details.\itemize{
\item \href{http://www.bioconductor.org/packages/release/bioc/vignettes/biosigner/inst/doc/biosigner-vignette.html}{\pkg{biosigner}}. It includes three classification algorithms: PLS-DA, RF and SVM; it only works with censoring event variable (but not with survival time).
\item \href{https://kogalur.github.io/randomForestSRC/theory.html}{\pkg{randomForestSRC}}. Random Forests for survival (and regression and classification).
\item \href{https://github.com/EmilyLMorris/survBoost}{\pkg{SurvBoost}}. A high dimensional variable selection method for stratified proportional hazards model.
}

The returning object changes according chosen arguments:\itemize{
\item if \code{return.ML.object = FALSE}, only variables' importance/coefficients will be showed;
\item if \code{return.ML.object = TRUE} and \code{train.index} is empty, the object (list-type) includes the machine learning object and a double data.frame with variables' importance/coefficients; and
\item if \code{return.ML.object = TRUE} and \code{train.index} contains a vector of samples, the list-type object would store also a double data.frame with training and validation (test) datasets (with percentage or categorized data).
}

\strong{Important note}: for using SurvBoost's method, you MUST to load it BEFORE FlowCT for avoiding internal conflicts.
}
\examples{
\dontrun{
# eg1: only return more implied populations, after cutoff calculation
ml1 <- prog.pop.selection(fcs.SCE = fcs, cell.clusters = "SOM_named",
          time.var = "PFS", event.var = "PFS_c", cutoff.type = "quantiles",
          method = "survboost", method.params = list(rate = 0.4))

# eg2: apply predict (with training and validation datasets, 70\%/30\%), no cutoffs
train_idx <- sample(length(fcs$patient_id), length(fcs$patient_id)*0.7)
ml2 <- prog.pop.selection(fcs.SCE = fcs, cell.clusters = "SOM_named",
          time.var = "PFS", event.var = "PFS_c", cutoff.type = "none",
          method = "random_forest", train.index = train_idx, return.ML.object = T)
ml2_pr <- predict(ml2$ML.object, newdata = ml2$survival.data$test)

biosigner::predict(ml2$ML.object, #predict for biosigner
           newdata = ml2$survival.data$test[,-c(1:2,32)]) #delete survival and condition cols

SurvBoost::predict.boosting(ml2$ML.object, newdata = ml2$survival.data$test) #survboost
}
}
\keyword{prognostic}
\keyword{survival}
